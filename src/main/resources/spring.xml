<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--    扫描组件除了控制层-->
    <context:component-scan base-package="com.ssm">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

<!--    引入jdbc.properties-->
     <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>
    <!-- 配置Druid数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

<!--    配置事务管理器   切面+通知-->
     <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
         <property name="dataSource" ref="dataSource"></property>
     </bean>
    <!--
  开启事务的注解驱动
  将使用@Transactional注解所标识的方法或类中所有的方法使用事务进行管理
  通过注解@Transactional 表示连接点
    -->
     <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>


<!--    spring整合mybatis-->

<!--    配置SqlSessionFactoryBean   可以从ioc中直接获得SqlSessionFactory-->
<bean class="org.mybatis.spring.SqlSessionFactoryBean">
<!--    spring中配置mybatis核心配置文件的路径-->
    <property name="configLocation" value="classpath:mybatis-config.xml"></property>
<!--    设置数据源-->
    <property name="dataSource" ref="dataSource"></property>
<!--    全类名=>类名   !!类型别名对应的包-->
    <property name="typeAliasesPackage" value="com.ssm.pojo"></property>
</bean>
    <!--
     配置mapper接口的扫描，可以将指定包下所有的mapper接口
     通过SqlSession创建代理实现类对象，并将这些对象交给IOC容器管理
 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ssm.mapper"></property>
    </bean>

</beans>